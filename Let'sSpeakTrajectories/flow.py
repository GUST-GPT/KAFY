"""Main entry point for the user to the pipeline"""

# Generate Full UML Diagram pyreverse -o png -p all *.py
from KAFY.KAFY.installPackages import install_package
from KAFY.KAFY.transformersPlugin.BERT.pretrainingBERTModularCode import pretrain_BERT
from KAFY.KAFY.Pipeline import TrajectoryPipeline
import os
import sys

# sys.path.insert(0, os.getcwd())


install_package("tensorflow")
install_package("tensorflow_text")
install_package("keras_nlp")
install_package("datasets")


my_pipeline = TrajectoryPipeline(
    mode="pretraining",
    operation_type="generation",
    use_tokenization=True,
    use_detokenization=True,
    use_spatial_constraints=True,
    modify_spatial_constraints=True,
    use_predefined_spatial_constraints=True,
    project_path="/speakingTrajectories/Let'sSpeakTrajectories",
)

# Provide trajectories if tokenization is enabled
trajectories = [
    [
        (-6.473357, 106.720551),
        (-6.473348, 106.720566),
        (-6.472545, 106.718717),
        (-6.472545, 106.718717),
        (-6.472545, 106.718717),
        (-6.473451, 106.720958),
        (-6.473362, 106.720537),
    ],
    [
        (-6.225003, 106.762993),
        (-6.225002, 106.763002),
        (-6.224545, 106.7653),
        (-6.224093, 106.765932),
        (-6.223921, 106.767377),
    ],
    [
        (-6.360483, 106.884067),
        (-6.360481, 106.884069),
        (-6.36041, 106.883917),
        (-6.35997, 106.883158),
        (-6.359967, 106.883192),
        (-6.360481, 106.884069),
        (-6.35997, 106.883158),
    ],
    [
        (-6.596313, 106.791821),
        (-6.596567, 106.793023),
        (-6.596593, 106.793776),
        (-6.595535, 106.794241),
    ],
    [
        (-6.270974, 106.984929),
        (-6.270923, 106.984923),
        (-6.271047, 106.984949),
        (-6.270457, 106.985902),
        (-6.2701, 106.986685),
        (-6.269173, 106.98661),
    ],
    [
        (-6.380933, 107.037076),
        (-6.381597, 107.038792),
        (-6.381597, 107.038792),
        (-6.381597, 107.038792),
        (-6.381597, 107.038792),
        (-6.381597, 107.038792),
        (-6.381597, 107.038792),
        (-6.381597, 107.038792),
        (-6.381597, 107.038792),
        (-6.381597, 107.038792),
    ],
    [
        (-6.380765, 107.039731),
        (-6.380959, 107.039526),
        (-6.38019, 107.040585),
        (-6.381399, 107.039101),
        (-6.381399, 107.039101),
        (-6.381399, 107.039101),
        (-6.381399, 107.039101),
        (-6.381399, 107.039101),
        (-6.381399, 107.039101),
        (-6.381399, 107.039101),
    ],
    [
        (-6.320445, 106.907578),
        (-6.31969, 106.907906),
        (-6.320474, 106.907579),
        (-6.31969, 106.907906),
    ],
    [
        (-6.257819, 107.062462),
        (-6.259773, 107.06174),
        (-6.260137, 107.062125),
        (-6.260161, 107.062069),
        (-6.259667, 107.061733),
        (-6.259773, 107.06174),
        (-6.260137, 107.062125),
        (-6.260161, 107.062069),
        (-6.259667, 107.061733),
        (-6.259773, 107.06174),
    ],
    [
        (-6.210322, 106.922784),
        (-6.210055, 106.922747),
        (-6.21037, 106.922835),
        (-6.209929, 106.92262),
        (-6.21037, 106.922835),
        (-6.209929, 106.92262),
        (-6.21037, 106.922835),
        (-6.209929, 106.92262),
        (-6.209448, 106.922769),
        (-6.21037, 106.922835),
    ],
    [
        (-6.193377, 106.884942),
        (-6.193468, 106.884372),
        (-6.193322, 106.883766),
        (-6.193291, 106.884983),
    ],
    [
        (-6.298315, 106.682135),
        (-6.297338, 106.681483),
        (-6.298257, 106.682221),
        (-6.297338, 106.681483),
    ],
    [
        (-6.380634, 107.036071),
        (-6.380634, 107.036071),
        (-6.380634, 107.036071),
        (-6.380634, 107.036071),
        (-6.380634, 107.036071),
        (-6.380634, 107.036071),
        (-6.380634, 107.036071),
        (-6.380634, 107.036071),
        (-6.380634, 107.036071),
        (-6.380634, 107.036071),
    ],
    [
        (-6.674915, 106.882811),
        (-6.674915, 106.882811),
        (-6.674915, 106.882811),
        (-6.674915, 106.882811),
        (-6.674915, 106.882811),
        (-6.674915, 106.882811),
        (-6.674915, 106.882811),
        (-6.674915, 106.882811),
        (-6.674915, 106.882811),
        (-6.674915, 106.882811),
    ],
    [
        (-6.259918, 106.80415),
        (-6.259897, 106.804145),
        (-6.259984, 106.804353),
        (-6.259966, 106.80396),
        (-6.259897, 106.804145),
        (-6.259984, 106.804353),
        (-6.259966, 106.80396),
        (-6.259897, 106.804145),
        (-6.259984, 106.804353),
        (-6.259966, 106.80396),
    ],
    [
        (-6.319, 107.146965),
        (-6.320002, 107.148795),
        (-6.320129, 107.148624),
        (-6.320004, 107.148708),
        (-6.320584, 107.149738),
        (-6.320992, 107.150502),
    ],
    [
        (-6.335873, 107.277213),
        (-6.33544, 107.277107),
        (-6.335944, 107.277499),
        (-6.335999, 107.277212),
        (-6.33544, 107.277107),
        (-6.335944, 107.277499),
        (-6.335999, 107.277212),
        (-6.33544, 107.277107),
        (-6.335944, 107.277499),
        (-6.335999, 107.277212),
    ],
    [
        (-6.564926, 106.795057),
        (-6.565691, 106.794717),
        (-6.566776, 106.79428),
        (-6.564928, 106.795046),
    ],
    [
        (-6.374817, 107.042868),
        (-6.374817, 107.042868),
        (-6.374817, 107.042868),
        (-6.374817, 107.042868),
        (-6.374817, 107.042868),
        (-6.373779, 107.043567),
        (-6.373779, 107.043567),
        (-6.373246, 107.044193),
        (-6.373246, 107.044193),
        (-6.373246, 107.044193),
    ],
    [
        (-6.475401, 106.812133),
        (-6.474616, 106.81287),
        (-6.474616, 106.81287),
        (-6.474616, 106.81287),
        (-6.474616, 106.81287),
        (-6.474616, 106.81287),
        (-6.474616, 106.81287),
        (-6.474616, 106.81287),
        (-6.474616, 106.81287),
        (-6.474616, 106.81287),
    ],
]


# User creates their own rule dynamically
def user_defined_rule(token, previous_tokens):
    """Example of a user defined rule to be added
    to the spatial constraints module"""
    return len(previous_tokens) < 10  # Example condition


# User defines the rules they want to apply
rules = [user_defined_rule]

my_pipeline.set_trajectories(trajectories)
my_pipeline.set_tokenization_resolution(10)

# my_pipeline.define_spatial_constraints(rules=rules)

# Process the pipeline
model_path, data_path = my_pipeline.run()
print(model_path, data_path)
# Pass the config dictionary as an argument or import it from a separate config file
config = {
    "pretraining_batch_size": 128,
    "finetuning_batch_size": 32,
    "seq_length": 128,
    "mask_rate": 0.25,
    "predictions_per_seq": 32,
    "num_layers": 3,
    "model_dim": 256,
    "intermediate_dim": 512,
    "num_heads": 4,
    "dropout": 0.1,
    "norm_epsilon": 1e-5,
    "pretraining_learning_rate": 5e-4,
    "pretraining_epochs": 8,
    "finetuning_epochs": 3,
    "finetuning_learning_rate": 5e-5,
    "dataset_path": data_path,
    "split_ratio": [0.8, 0.1, 0.1],
    "output_dir": "/speakingTrajectories/TrajPipeline/NewPipeline/temp_data_train_val_test",
    "checkpoint_filepath": model_path,
}

pretrain_BERT(config)
